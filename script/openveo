#! /bin/sh
### BEGIN INIT INFO
# Provides:          openveo
# Required-Start:    
# Required-Stop:    
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start / stop OpenVeo Application or Web Service
# Description:       Start the OpenVeo Application or Web Service server on
#                    the port configured into OpenVeo configuration file
#                    (serverCong.json).
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="OpenVeo Web Server"
NAME=nodejs
DAEMON=/usr/bin/$NAME
DAEMON_ARGS="/home/openveo/openveo/server.js"
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Starts the daemon/service.
# Process is launched with user "openveo".
#
# Return
#   0 if daemon has been started
#   1 if daemon was already running
#   2 if daemon could not be started
do_start()
{
  # Test if command is valid before starting the daemon
  NODE_ENV=production start-stop-daemon --exec $DAEMON --test --chuid openveo:openveo --start --pidfile $PIDFILE > /dev/null \
          || return 1
  
  # Start deamon, in background, using openveo user
  NODE_ENV=production start-stop-daemon --background --make-pidfile --pidfile $PIDFILE --chuid openveo:openveo --exec $DAEMON --start -- $DAEMON_ARGS $PROCESS_ARGS || return 2
}

#
# Stops the daemon/service.
#
# Return
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
do_stop()
{

  # Stop daemon
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --exec $DAEMON --pidfile $PIDFILE
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  
  # Daemon couldn't be stopped, kill it
  start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON --pidfile $PIDFILE
  [ "$?" = 2 ] && return 2
  
  rm -f $PIDFILE
  return "$RETVAL"
}

# Use first argument to find out the openveo service to act on 
# (Application or Web Service)
case "$1" in
  app)
    PIDFILE=/var/run/nodejs-app.pid
    ;;
  ws)
    PIDFILE=/var/run/nodejs-ws.pid
    PROCESS_ARGS="-ws"
    ;;
  *)
    echo "Usage: $SCRIPTNAME {app|ws} {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

# Use second argument to find out the action to operate on the service
case "$2" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    status_of_proc -p "$PIDFILE" "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
            do_start
            case "$?" in
                    0) log_end_msg 0 ;;
                    1) log_end_msg 1 ;; # Old process is still running
                    *) log_end_msg 1 ;; # Failed to start
            esac
            ;;
      *)
            # Failed to stop
            log_end_msg 1
            ;;
    esac
    ;;
*)
    echo "Usage: $SCRIPTNAME {app|ws} {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac