"use scrict"

var Database = process.requireAPI("lib/Database.js");

/**
 * An EntityProvider provides basic CRUD implementation. 
 * All entities providers must be instance of EntityProvider.
 * @param Database database The database to interact with
 * @param String collection The collection name 
 */
function EntityProvider(database, collection){
  this.init(database, collection);
}

module.exports = EntityProvider;

/**
 * Initializes an EntityProvider.
 * @param Database database The database to interact with
 * @param String collection The collection name
 */
EntityProvider.prototype.init = function(database, collection){
  this.database = database;
  this.collection = collection;
  
  if(!this.database || !this.collection)
    throw new Error("An EntityProvider needs a database and a collection");
  
  if(!(this.database instanceof Database))
    throw new Error("Database must be an of type Database");
  
};

/**
 * Gets an entity.
 * @param String id The entity id 
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 *   - Object The entity
 */
EntityProvider.prototype.getOne = function(id, callback){
  this.database.get(this.collection, {id : parseInt(id)}, null, 1, function(error, entities){
    if(entities && entities.length)
      callback(error, entities[0]);
    else
      callback(error);
  });
};

/**
 * Gets an entity filter by custom filter.
 * @param filter collection {key : value, ...}
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 *   - Object The entity
 */
EntityProvider.prototype.getByFilter = function(filter, callback){
  this.database.get(this.collection, filter , null, 1, function(error, entities){
    if(entities && entities.length)
      callback(error, entities[0]);
    else
      callback(error);
  });
};

/**
 * Gets a list of entities.
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 *   - Object The list of entities
 */
EntityProvider.prototype.get = function(callback){
  this.database.get(this.collection, null, null, -1, callback);
};

/**
 * Adds a new entity.
 * @param Object data Data to store into the collection
 * @param Function callback The function to call when it's done 
 *   - Error The error if an error occurred, null otherwise
 */
EntityProvider.prototype.add = function(data, callback){
  this.database.insert(this.collection, data, callback);
};

/**
 * Updates an entity.
 * @param String id The id of the entity to update
 * @param Object data Entity data
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 */
EntityProvider.prototype.update = function(id, data, callback){
  this.database.update(this.collection, {id : id}, data, function(error){
    if(callback)
      callback(error);
  });
};

/**
 * Removes an entity.
 * @param String id The id of the entity to remove
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 */
EntityProvider.prototype.remove = function(id, callback){
  this.database.remove(this.collection, {id : id}, callback);
};