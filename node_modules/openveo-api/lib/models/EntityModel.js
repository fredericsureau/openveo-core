"use scrict"

/**
 * An EntityModel provides basic CRUD implementation. 
 * All entities models must be instance of EntityModel.
 */
function EntityModel(){}

module.exports = EntityModel;

/**
 * Initializes an EntityModel.
 * @param EntityProvider The entity provider
 */
EntityModel.prototype.init = function(provider){
  this.provider = provider;
  
  if(!this.provider)
    throw new Error("An EntityModel needs a provider");
};

/**
 * Gets an entity.
 * @param String id The entity id 
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 *   - Object The entity
 */
EntityModel.prototype.getOne = function(id, callback){
  this.provider.getOne(id, callback);
};

/**
 * Gets a list of entities.
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 *   - Object The list of entities
 */
EntityModel.prototype.get = function(callback){
  this.provider.get(callback);
};

/**
 * Adds a new entity.
 * @param Object data Data to store into the collection
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 *   - Object The added entity 
 */
EntityModel.prototype.add = function(data, callback){
  data.id = Date.now() + '';
  this.provider.add(data, function(error){
    if(callback)
      callback(error, data);
  });
};

/**
 * Updates an entity.
 * @param String id The id of the entity to update
 * @param Object data Entity data
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 *   - Number The number of updated items
 */
EntityModel.prototype.update = function(id, data, callback){
  this.provider.update(id, data, callback);
};

/**
 * Removes an entity.
 * @param String id The id of the entity to remove
 * @param Function callback The function to call when it's done
 *   - Error The error if an error occurred, null otherwise
 *   - Number The number of removed items
 */
EntityModel.prototype.remove = function(id, callback){
  this.provider.remove(id, callback);
};